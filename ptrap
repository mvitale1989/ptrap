#!/bin/bash
set -e

PROGRAM_ID_STRING="ptrap"
IPTABLES_IDENTIFIER="${PROGRAM_ID_STRING}$$"
LOCK_DIRECTORY="/var/run/$PROGRAM_ID_STRING"
TC_DELAY_MS="500"
TAIL_INTERVAL_S="0.1"
IP_TO_MONITOR=""
PORT_TO_MONITOR=""
MONITOR_TCP=""
MONITOR_UDP=""
TCP_ONLY_SYN=""
PACKETS_PER_MINUTE="20"
VERBOSE=""
USER_SCRIPT=""

print_usage () {
cat <<EOF
Usage: $0 { [-h] | [-v] { -t [ -c ] | -u } -i ip_to_monitor [-p port_to_monitor] [-s delay_ms] [ -n packets_per_minute ] [-e path_to_user_script] }

This program uses iptables rules and tc qdisc to find out which process
sends packets to a specific remote IP and port.

Important considerations:
* Any traffic directed to the monitored IP/port will be delayed according to the
  `-s` parameter.
* Your current `tc` configuration will be overwritten, at program start.
* A chatty application may exchange many packets per seconds with a single
  destination. To prevent flooding this script with packets that belong to the
  same connection (and, consequently to the same process), you can use the `-n`
  flag to limit the max number of matches per minute for a single connection;
  however, if an application  generates a lot of traffic by opening _new_
  connections (thus using many different source ports in rapid succession)
  flooding could still happen.
* If too many packets are captured in a short time (flooding), this script might
  not read them fast enough, and for some of them the sending process could die
  before the system could be queried for informations about the sending process.
  In such a case, and in other special cases (e.g. the sending process
  immediately exits after sending the packet, without waiting for a response),
  this program may not be able to return informations about the sending process.

Parameters:
* -h: print this help message
* -v: be verbose. If unset, only captured process information will be printed out.
* -t: monitor TCP packets
* -c: when monitoring TCP packets, match only new connections
* -u: monitor UDP messages
* -i: monitor packets destined to this IP address
* -p: monitor packets destined to this remote PORT
* -s: delay outgoing matching packets, in milliseconds. Default 500
* -n: specify how many packets must be matched at most per minute. Please read
      the important considerations, concerning its effectiveness in preventing
      packet flooding. Default value is 20.
* -e: path to user script, to execute on packet match. The PID of the
      sending process will be passed to it as parameters.
EOF
}

print_failed_dependency () {
	DEPENDENCY="$1"
	CONTAINING_PACKAGE="$2"
	echo "Failed dependency: the \"$DEPENDENCY\" program must be installed to continue." >&2
	exit 2
}

log () {
	MESSAGE="$1"
	FORCE_LOG="$2"
	PREFIX="[$(date '+%Y-%m-%d, %H:%M:%S.%N')]"
	[ -n "$VERBOSE" -o -n "$FORCE_LOG" ] && echo "$PREFIX $MESSAGE" || true
}


PRG_LSOF="$(which lsof)" || print_failed_dependency "lsof"
PRG_TC="$(which tc)" || print_failed_dependency "tc"
PRG_IPTABLES="$(which iptables)" || print_failed_dependency "iptables"
PRG_IP="$(which ip)" || print_failed_dependency "ip"

while [ $# -gt 0 ]; do
	unset OPTIND
	while getopts "i:p:tuhvs:e:cn:" OPTNAME; do
		case "$OPTNAME" in
			"i") IP_TO_MONITOR="$OPTARG";;
			"p") PORT_TO_MONITOR="$OPTARG";;
			"t") MONITOR_TCP="y";;
			"u") MONITOR_UDP="y";;
			"h") print_usage; exit 0;;
			"v") VERBOSE="y";;
			"s") TC_DELAY_MS="$OPTARG";;
			"e") USER_SCRIPT="$OPTARG";;
			"c") TCP_ONLY_SYN="y";;
			"n") PACKETS_PER_MINUTE="$OPTARG";;
			*) log "Error during option parsing. Exiting." force >&2; exit 1
		esac
	done
	shift $((OPTIND-1))

	if [ $# -gt 0 ]; then
		log "Ignoring extra option, \"$1\""
		shift 1
	fi
done

if [ -z "$IP_TO_MONITOR" ]; then
	echo "No target ip defined." >&2
	print_usage
	exit 3
elif [ -z "$MONITOR_TCP" -a -z "$MONITOR_UDP" ]; then
	echo "Select at least one IP protocol to monitor (see options -t and -u)." >&2
	print_usage
	exit 4
elif [ -z "$MONITOR_TCP" -a -n "$TCP_ONLY_SYN" ]; then
	echo "You must listen for TCP packets (flag -t), in order to use flag -c." >&2
	print_usage
	exit 5
elif [ $(id -u) -ne 0 ]; then
  echo "You must be root to execute this script." >&2
  exit 6
elif [ ! -f /var/log/syslog ]; then
  echo "'/var/log/message' was not found." >&2
  echo "This program depends on syslog outputting messages to that file." >&2
  echo "Please configure your system accordingly." >&2
  exit 8
fi

PROTOCOLS_TO_MONITOR="${MONITOR_TCP:+tcp} ${MONITOR_UDP:+udp}"
OUTPUT_INTERFACE="$($PRG_IP route get 10.10.41.71 | head -n1 | grep -o -E "dev \w*\s" | cut -d' ' -f2)"
log "Program parameters:"
log "- Ip to monitor: $IP_TO_MONITOR"
log "- Port to monitor: ${PORT_TO_MONITOR:-any}"
log "- Protocols to monitor: $PROTOCOLS_TO_MONITOR ${TCP_ONLY_SYN:+(for tcp, only new connections will be matched)}"
log "- Max packets per minute matched, from a single local source port: $PACKETS_PER_MINUTE"
log "- iptables rule chain and match identifier: $IPTABLES_IDENTIFIER"
log "- TC parameters for netem qdisc: delay ${TC_DELAY_MS}"
log "- Output interface: $OUTPUT_INTERFACE (auto detected)"
log "- lsof executable path: $PRG_LSOF"
log "- iptables executable path: $PRG_IPTABLES"
log "- tc executable path: $PRG_TC"
log "- ip executable path: $PRG_IP"
log "- lock directory: $LOCK_DIRECTORY"
log "- User script: ${USER_SCRIPT:-none}"

setup_tc () {
	log "Setting up tc..."
	U32_CMD="$PRG_TC filter add dev $OUTPUT_INTERFACE parent 1:0 protocol ip u32"
	$PRG_TC qdisc del dev "$OUTPUT_INTERFACE" root 2>/dev/null || log "No root qdisc present. Skipping cleanup."
	$PRG_TC qdisc add dev "$OUTPUT_INTERFACE" root handle "1:0" prio bands 4
	$PRG_TC qdisc add dev "$OUTPUT_INTERFACE" parent "1:4" handle "2:0" netem delay "${TC_DELAY_MS}ms"
	[ -n "$MONITOR_UDP" ] && $U32_CMD match ip dst "$IP_TO_MONITOR" match ip protocol 17 FF ${PORT_TO_MONITOR:+match ip dport "$PORT_TO_MONITOR" FFFF} flowid "1:4"
	[ -n "$MONITOR_TCP" ] && $U32_CMD match ip dst "$IP_TO_MONITOR" match ip protocol 6 FF ${PORT_TO_MONITOR:+match ip dport "$PORT_TO_MONITOR" FFFF} flowid "1:4"
	log "tc setup complete.."
}
teardown_tc() {
	log "Tearing down tc..."
	$PRG_TC qdisc del dev "$OUTPUT_INTERFACE" root || log "Error during tc cleanup. Please manually delete tc root qdisc." force >&2
	log "tc teardown complete.".
}

setup_iptables() {
	log "Setting up iptables rules..."
	SYN_ARGS=$( [ -n "$TCP_ONLY_SYN" ] && echo -n "--syn" || echo -n "" )
	HASHLIMIT_ARGS='-m hashlimit --hashlimit '"${PACKETS_PER_MINUTE}"'/minute --hashlimit-burst 1 --hashlimit-mode srcip,dstip,srcport --hashlimit-name '"$PROGRAM_ID_STRING"
	$PRG_IPTABLES -N "$IPTABLES_IDENTIFIER"
	[ -n "${MONITOR_UDP}" ] && $PRG_IPTABLES -A "$IPTABLES_IDENTIFIER" -p udp -m udp -d "$IP_TO_MONITOR" ${PORT_TO_MONITOR:+--dport "$PORT_TO_MONITOR"} -j LOG --log-prefix "$IPTABLES_IDENTIFIER" ${HASHLIMIT_ARGS}_udp
 	[ -n "${MONITOR_TCP}" ] && $PRG_IPTABLES -A "$IPTABLES_IDENTIFIER" -p tcp -m tcp ${SYN_ARGS} -d "$IP_TO_MONITOR" ${PORT_TO_MONITOR:+--dport "$PORT_TO_MONITOR"} -j LOG --log-prefix "$IPTABLES_IDENTIFIER" ${HASHLIMIT_ARGS}_tcp
	$PRG_IPTABLES -I OUTPUT -j "$IPTABLES_IDENTIFIER" -m comment --comment "$IPTABLES_IDENTIFIER"
	log "iptables rules setup complete."
}
teardown_iptables() {
	log "Tearing down iptables rules..."
	log "Current rules:"
	$PRG_IPTABLES -L OUTPUT --line-numbers | while read LINE; do
		log "$LINE"
	done
	for RULENUMBER in $($PRG_IPTABLES -L OUTPUT --line-numbers | grep "$IPTABLES_IDENTIFIER" | tac | cut -d' ' -f1 | tr '\n' ' '); do
		log "Deleting rule $RULENUMBER..."
		$PRG_IPTABLES -D OUTPUT $RULENUMBER
	done
	iptables -F "$IPTABLES_IDENTIFIER"
	iptables -X "$IPTABLES_IDENTIFIER"
	log "iptables rules teardown complete."
}

setup_lock_directory () {
	#IMPROVE also add PID to directory, to allow stale lock check
	log "Creating lock directory..."
	if mkdir "$LOCK_DIRECTORY"; then
		log "Lock directory created successfully."
	else
		log "Error: lock directory already present ad $LOCK_DIRECTORY." force >&2
		log "If another instance is not running, it is stale and can be removed manually with \"rmdir $LOCK_DIRECTORY\"." force >&2
		exit 7
	fi
}

teardown_lock_directory () {
	log "Removing lock directory..."
	rmdir "$LOCK_DIRECTORY"
	log "Lock directory removed successfully."
}

monitor_syslog() {
	log "Starting syslog monitoring..."
	tail -f -s "$TAIL_INTERVAL_S" /var/log/syslog | grep --line-buffered "$IPTABLES_IDENTIFIER" | while read LINE; do
		PROTOCOL=$(echo "$LINE" | grep -o -E "PROTO=\w*" | cut -d= -f2) || PROTOCOL=""
		SOURCE_PORT=$(echo "$LINE" | grep -o -E "SPT=[0-9]+" | cut -d= -f2) || SOURCE_PORT=""
		MATCHING_PID=$($PRG_LSOF -i ${PROTOCOL}:${SOURCE_PORT} | tail -n1 | awk '{print $2}') || MATCHING_PID=""
		if [ -z "$MATCHING_PID" ]; then
			log "ERROR: request detected, but lsof did not list any process. Read the program help for tips on how to avoid this." force >&2
		else
			log "PROCESS REQUEST CAPTURED. Matching PID: $MATCHING_PID" force
			if [ -n "$USER_SCRIPT" ]; then
				USER_SCRIPT_COMMAND="$USER_SCRIPT $MATCHING_PID"
				log "Executing user script: $USER_SCRIPT_COMMAND"
				if bash -c "$USER_SCRIPT_COMMAND"; then
					log "User script executed successfully."
				else
					log "ERROR: user script exited with code $?." forced >&2
				fi
			fi
		fi
	done
}

setup () {
	setup_tc
	setup_iptables
}
teardown () {
	teardown_iptables
	teardown_tc
	teardown_lock_directory
}


setup_lock_directory
trap teardown EXIT
setup
monitor_syslog
